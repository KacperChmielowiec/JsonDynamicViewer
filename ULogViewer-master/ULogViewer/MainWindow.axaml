<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:abControls="using:CarinaStudio.Controls"
		xmlns:abConverters="using:CarinaStudio.Data.Converters"
		xmlns:aConverters="using:Avalonia.Data.Converters"
        xmlns:appControls="using:CarinaStudio.ULogViewer.Controls"
		xmlns:appInput="using:CarinaStudio.ULogViewer.Input"
        xmlns:appViewModels="using:CarinaStudio.ULogViewer.ViewModels"
		xmlns:asControls="using:CarinaStudio.AppSuite.Controls"
		xmlns:asConverters="using:CarinaStudio.AppSuite.Converters"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="CarinaStudio.ULogViewer.MainWindow"
		Classes="Tabbed"
		Icon="/ULogViewer.ico"
		MinHeight="{StaticResource Double/MainWindow.MinHeight}"
		MinWidth="{StaticResource Double/MainWindow.MinWidth}">

	<Window.ExtendClientAreaTitleBarHeightHint>
		<MultiBinding Converter="{x:Static abConverters:DoubleConverters.Addition}">
			<Binding ElementName="tabControl" Path="TabStripSize"/>
			<Binding RelativeSource="{RelativeSource Mode=Self}" Path="ContentPadding.Top"/>
		</MultiBinding>
	</Window.ExtendClientAreaTitleBarHeightHint>

	<!-- Data templates -->
	<Window.DataTemplates>
		<DataTemplate DataType="{x:Type appViewModels:Session}">
			<Grid ColumnDefinitions="*,Auto" Background="{x:Static Brushes.Transparent}" HorizontalAlignment="Stretch">
				<Grid.ContextMenu>
					<ContextMenu PlacementMode="Bottom">
						<MenuItem Command="{Binding $parent[Window].SetCustomSessionTitleCommand}" CommandParameter="{Binding $parent[TabItem]}" Header="{DynamicResource String/MainWindow.SetCustomSessionTitle}">
							<MenuItem.Icon>
								<Border Classes="MenuItem_Icon">
									<Image Classes="Icon" Source="{StaticResource Image/Icon.Edit}"/>
								</Border>
							</MenuItem.Icon>
						</MenuItem>
						<MenuItem Command="{Binding $parent[Window].ClearCustomSessionTitleCommand}" CommandParameter="{Binding $parent[TabItem]}" Header="{DynamicResource String/MainWindow.ClearCustomSessionTitle}" IsEnabled="{Binding HasCustomTitle}"/>
						<Separator/>
						<MenuItem Command="{Binding $parent[Window].MoveSessionToNewWorkspaceCommand}" CommandParameter="{Binding $parent[TabItem]}" Header="{DynamicResource String/Common.OpenInNewWindow}" IsEnabled="{Binding $parent[Window].HasMultipleSessions}">
							<MenuItem.Icon>
								<Border Classes="MenuItem_Icon">
									<Image Classes="Icon" Source="{StaticResource Image/Icon.AddWindow}"/>
								</Border>
							</MenuItem.Icon>
						</MenuItem>
						<Separator/>
						<MenuItem Command="{Binding $parent[Window].CloseSessionTabItemCommand}" CommandParameter="{Binding $parent[TabItem]}" Header="{DynamicResource String/Common.CloseTab}" InputGesture="{x:Static appInput:KeyGestures.CloseTab}">
							<MenuItem.Icon>
								<Border Classes="MenuItem_Icon">
									<Image Classes="Icon" Source="{StaticResource Image/Icon.Close}"/>
								</Border>
							</MenuItem.Icon>
						</MenuItem>
					</ContextMenu>
				</Grid.ContextMenu>
				<Grid Name="Content" ColumnDefinitions="Auto,*" HorizontalAlignment="Stretch">
					<ToolTip.Tip>
						<StackPanel Margin="{StaticResource Thickness/MainWindow.TabItem.ToolTip.Padding}">
							<StackPanel.Styles>
								<Style Selector="Image.ToolTipIcon">
									<Setter Property="Height" Value="{StaticResource Double/MainWindow.TabItem.ToolTip.Icon.Size}"/>
									<Setter Property="Margin" Value="{StaticResource Thickness/MainWindow.TabItem.ToolTip.Icon.Margin}"/>
									<Setter Property="Stretch" Value="Uniform"/>
									<Setter Property="VerticalAlignment" Value="Center"/>
									<Setter Property="Width" Value="{StaticResource Double/MainWindow.TabItem.ToolTip.Icon.Size}"/>
								</Style>
								<Style Selector="TextBlock.ToolTipText">
									<Setter Property="VerticalAlignment" Value="Center"/>
								</Style>
							</StackPanel.Styles>
							<TextBlock FontWeight="Bold" Text="{Binding Title}"/>
							<Separator Classes="Dialog_Separator_Small"/>
							<StackPanel IsVisible="{Binding !IsHibernated}">
								<StackPanel IsVisible="{Binding IsLogsReadingPaused}">
									<StackPanel Orientation="Horizontal">
										<Image Classes="ToolTipIcon" Source="{StaticResource Image/Icon.PauseMedia}"/>
										<TextBlock Classes="ToolTipText" Text="{DynamicResource String/MainWindow.Session.Paused}"/>
									</StackPanel>
									<Separator Classes="Dialog_Separator_Small"/>
								</StackPanel>
								<StackPanel IsVisible="{Binding IsWaitingForDataSources}">
									<StackPanel Orientation="Horizontal">
										<Image Classes="ToolTipIcon" Source="{StaticResource Image/Icon.Waiting}"/>
										<TextBlock Classes="ToolTipText" Text="{DynamicResource String/MainWindow.Session.WaitingForDataSources}"/>
									</StackPanel>
									<Separator Classes="Dialog_Separator_Small"/>
								</StackPanel>
								<abControls:FormattedTextBlock Classes="ToolTipText" Arg1="{Binding AllLogCount}" Format="{DynamicResource String/MainWindow.Session.AllLogCount}"/>
								<abControls:FormattedTextBlock Classes="ToolTipText" Arg1="{Binding LogsMemoryUsage, Converter={x:Static asConverters:FileSizeConverter.Default}}" Format="{DynamicResource String/MainWindow.Session.LogsMemoryUsage}"/>
							</StackPanel>
							<StackPanel IsVisible="{Binding IsHibernated}" Orientation="Horizontal">
								<Image Classes="ToolTipIcon" Source="{StaticResource Image/Icon.Leaf.Colored}"/>
								<TextBlock Classes="ToolTipText" Text="{DynamicResource String/MainWindow.Session.Hibernated}"/>
							</StackPanel>
						</StackPanel>
					</ToolTip.Tip>
					<Image Classes="TabItem_Icon" IsEnabled="{Binding !IsHibernated}" Source="{Binding Icon}"/>
					<TextBlock Name="titleTextBlock" Classes="TabItem_TextBlock" Grid.Column="1" Text="{Binding Title}"/>
				</Grid>
				<Button Classes="TabItem_Button" Command="{Binding $parent[Window].CloseSessionTabItemCommand}" CommandParameter="{Binding $parent[TabItem]}" Grid.Column="1" ToolTip.Tip="{DynamicResource String/Common.CloseTab.WithGesture}">
					<Button.IsVisible>
						<MultiBinding Converter="{x:Static BoolConverters.Or}">
							<Binding Path="IsSelected" RelativeSource="{RelativeSource AncestorType={x:Type TabItem}}"/>
							<Binding Path="IsPointerOver" RelativeSource="{RelativeSource AncestorType={x:Type TabItem}}"/>
						</MultiBinding>
					</Button.IsVisible>
					<Image Classes="Icon" Source="{StaticResource Image/Icon.Close}"/>
				</Button>
			</Grid>
		</DataTemplate>
	</Window.DataTemplates>

	<!-- Resources -->
	<Window.Resources>

		<!-- Native menu -->
		<NativeMenu x:Key="nativeMenu">
			<NativeMenuItem Header="{DynamicResource String/MainWindow.Windows}">
				<NativeMenuItem.Menu>
					<NativeMenu>
						<NativeMenuItem Command="{Binding $self.CreateMainWindow}" Header="{DynamicResource String/Common.CreateWindow}" Gesture="Cmd+N"/>
						<NativeMenuItemSeparator/>
						<NativeMenuItem Command="{Binding $self.LayoutMainWindowsCommand}" CommandParameter="{x:Static asControls:MultiWindowLayout.Horizontal}" Header="{DynamicResource String/MainWindow.LayoutMainWindows.Horizontal}"/>
						<NativeMenuItem Command="{Binding $self.LayoutMainWindowsCommand}" CommandParameter="{x:Static asControls:MultiWindowLayout.Vertical}" Header="{DynamicResource String/MainWindow.LayoutMainWindows.Vertical}"/>
						<NativeMenuItem Command="{Binding $self.LayoutMainWindowsCommand}" CommandParameter="{x:Static asControls:MultiWindowLayout.Tile}" Header="{DynamicResource String/MainWindow.LayoutMainWindows.Tile}"/>
					</NativeMenu>
				</NativeMenuItem.Menu>
			</NativeMenuItem>
			<NativeMenuItem Header="{DynamicResource String/MainWindow.Tabs}">
				<NativeMenuItem.Menu>
					<NativeMenu>
						<NativeMenuItem Command="{Binding $self.CreateSessionTabItem}" Header="{DynamicResource String/Common.CreateTab}"  Gesture="Cmd+T"/>
						<NativeMenuItemSeparator/>
						<NativeMenuItem Command="{Binding $self.SetCurrentCustomSessionTitle}" Header="{DynamicResource String/MainWindow.SetCustomSessionTitle}"/>
						<NativeMenuItem Command="{Binding $self.ClearCurrentCustomSessionTitle}" Header="{DynamicResource String/MainWindow.ClearCustomSessionTitle}" IsEnabled="{Binding ActiveSession.CustomTitle, Converter={x:Static aConverters:ObjectConverters.IsNotNull}}"/>
						<NativeMenuItemSeparator/>
						<NativeMenuItem Command="{Binding $self.MoveCurrentSessionToNewWorkspace}" Header="{DynamicResource String/Common.OpenInNewWindow}" IsEnabled="{Binding $self.HasMultipleSessions}"/>
						<NativeMenuItemSeparator/>
						<NativeMenuItem Command="{Binding $self.CloseCurrentSessionTabItem}" Header="{DynamicResource String/Common.CloseTab}" Gesture="Cmd+W"/>
					</NativeMenu>
				</NativeMenuItem.Menu>
			</NativeMenuItem>
			<NativeMenuItem CommandParameter="Tools" Header="{DynamicResource String/SessionView.Tools}">
				<NativeMenuItem.Menu>
					<NativeMenu>
						<NativeMenuItem Command="{Binding $self.EditPathEnvironmentVariable}" Header="{DynamicResource String/SessionView.EditPathEnvVar}"/>
						<NativeMenuItemSeparator/>
						<NativeMenuItem Command="{Binding $self.EditConfiguration}" Header="{DynamicResource String/SessionView.EditConfiguration}"/>
						<NativeMenuItem Command="{Binding $self.EditPersistentState}" Header="{DynamicResource String/SessionView.EditPersistentState}"/>
						<NativeMenuItem Command="{Binding $self.Application.ShowSelfTestingWindow}" CommandParameter="SelfTesting" Header="{DynamicResource String/Common.SelfTesting}"/>
					</NativeMenu>
				</NativeMenuItem.Menu>
			</NativeMenuItem>
		</NativeMenu>

	</Window.Resources>

	<!-- Styles -->
	<Window.Styles>
		<Style Selector="CaptionButtons">
			<Setter Property="MaxHeight" Value="{Binding $parent[Window].ExtendClientAreaTitleBarHeightHint}"/>
		</Style>
	</Window.Styles>

	<!-- Content -->
	<asControls:TabControl Name="tabControl" DragDrop.AllowDrop="True" DragLeaveItem="OnDragLeaveTabItem" DragOverItem="OnDragOverTabItem" DropOnItem="OnDropOnTabItem" ItemDragged="OnTabItemDragged">

		<!-- Add new tab -->
		<TabItem Classes="Empty">
			<TabItem.Header>
				<Button Classes="AddTabItem" Command="{Binding $parent[Window].CreateSessionTabItem}">
					<Button.ContextMenu>
						<appControls:LogProfileSelectionContextMenu LogProfileSelected="OnLogProfileSelected"/>
					</Button.ContextMenu>
					<Image Classes="Icon" Source="{StaticResource Image/Icon.Add}"/>
				</Button>
			</TabItem.Header>
		</TabItem>

	</asControls:TabControl>

</Window>

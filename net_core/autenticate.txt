public void ConfigureServices(IServiceCollection services)
{
    services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
        .AddJwtBearer(options =>
        {
            // konfiguracja JWT bearer options
        });

    services.AddControllers();

    // wymaga uwierzytelnienia dla wszystkich punktów końcowych
    services.AddMvc(options =>
    {
        var policy = new AuthorizationPolicyBuilder()
            .RequireAuthenticatedUser()
            .Build();
        options.Filters.Add(new AuthorizeFilter(policy));
    });

    // umożliwia dostęp do jednego punktu końcowego bez uwierzytelnienia
    services.AddMvc(options =>
    {
        options.Filters.Add(new AllowAnonymousFilter());
    })
    .SetCompatibilityVersion(CompatibilityVersion.Version_3_0);
}
public class MyController : ControllerBase
{
    private readonly IMyService _myService;

    public MyController([FromServices] IMyService myService)
    {
        _myService = myService;
    }

    [HttpGet]
    public ActionResult<string> Get()
    {
        var result = _myService.DoSomething();
        return Ok(result);
    }
}
app.UseEndpoints(endpoints =>
{
    endpoints.MapGet("/", async context =>
    {
        await context.Response.WriteAsync("Hello World!");
    }).RequireAuthorization();  // wymagamy autoryzacji dla każdego punktu końcowego

    endpoints.MapGet("/private", async context =>
    {
        await context.Response.WriteAsync("This is a private endpoint.");
    }).Authorize("myPolicy");  // wymagamy polityki uwierzytelnienia "myPolicy" dla punktu końcowego
});
AllowAnonymous()

var user = await _userManager.FindByNameAsync(username);
if (await _userManager.IsInRoleAsync(user, "Admin"))
{
    // użytkownik należy do roli "Admin"
}
UserManager.GetRolesAsync() pozwala na pobranie listy ról, do których jest przypisany użytkownik. Przykładowe użycie tej metody:

csharp
Copy code
var user = await _userManager.FindByNameAsync(username);
var roles = await _userManager.GetRolesAsync(user);
if (roles.Contains("Admin"))
{
    // użytkownik należy do roli "Admin"
}



var user = new ApplicationUser { UserName = "testuser", Email = "testuser@example.com" };
var result = await _userManager.CreateAsync(user, "Test@123");

if (result.Succeeded)
{
    // Utworzono użytkownika
}
else
{
    foreach (var error in result.Errors)
    {
        ModelState.AddModelError(string.Empty, error.Description);
    }
}







public void ConfigureServices(IServiceCollection services)
{
    // Dodajemy własny PasswordValidator
    services.AddTransient<IPasswordValidator<ApplicationUser>, CustomPasswordValidator>();

    // Dodajemy własny ErrorDescriber
    services.AddSingleton<IdentityErrorDescriber, CustomIdentityErrorDescriber>();

    // Rejestrujemy menedżera użytkowników z wstrzykniętymi zależnościami
    services.AddScoped<UserManager<ApplicationUser>>(provider =>
        new UserManager<ApplicationUser>(
            provider.GetRequiredService<IUserStore<ApplicationUser>>(),
            provider.GetRequiredService<IOptions<IdentityOptions>>(),
            provider.GetRequiredService<IPasswordHasher<ApplicationUser>>(),
            provider.GetRequiredService<IEnumerable<IUserValidator<ApplicationUser>>>(),
            provider.GetRequiredService<IEnumerable<IPasswordValidator<ApplicationUser>>>(),
            provider.GetRequiredService<ILookupNormalizer>(),
            provider.GetRequiredService<IdentityErrorDescriber>(),
            provider.GetService<IServiceProvider>(),
            provider.GetRequiredService<ILogger<UserManager<ApplicationUser>>>()
        )
    );
    
    // ...
}

services.AddScoped<IPasswordHasher<ApplicationUser>, MyCustomPasswordHasher>();

services.AddIdentity<ApplicationUser, IdentityRole>(options =>
{
    options.Password.RequireDigit = true;
    options.Password.RequiredLength = 8;
    options.Password.RequireNonAlphanumeric = true;
    options.Password.RequireUppercase = true;
    options.Password.RequireLowercase = true;

    // Dodaj niestandardowy validator hasła
    options.Password.Validators.Add(new CustomPasswordValidator());
})
.AddErrorDescriber<CustomErrorDescriber>()
.AddEntityFrameworkStores<ApplicationDbContext>();

services.Configure<IdentityOptions>(options =>
{
    options.PasswordHasher = new MyCustomPasswordHasher();
});

var result = await _userManager.CreateAsync(user, password, new MyCustomPasswordHasher());